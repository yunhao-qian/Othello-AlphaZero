from collections.abc import Callable
from typing import TypedDict

import torch

def get_legal_moves(player_discs: int, opponent_discs: int) -> int: ...
def get_flips(move_mask: int, player_discs: int, opponent_discs: int) -> int: ...

class Position:
    @staticmethod
    def initial_position() -> "Position": ...
    def player(self) -> int: ...
    def player1_discs(self) -> int: ...
    def player2_discs(self) -> int: ...
    def __getitem__(self, index: int, /) -> int: ...
    def legal_moves(self) -> int: ...
    def legal_actions(self) -> list[int]: ...
    def apply_move(self, move: int, /) -> "Position": ...
    def apply_pass(self) -> "Position": ...
    def apply_action(self, action: int, /) -> "Position": ...
    def is_terminal(self) -> bool: ...
    def __str__(self) -> str: ...

class NeuralNetOutput(TypedDict):
    policy: torch.Tensor
    value: torch.Tensor

class MCTSResult(TypedDict):
    actions: list[int]
    visit_counts: list[int]
    mean_action_values: list[float]

class MCTS:
    def __init__(
        self,
        history_size: int = 4,
        torch_device: str = "cpu",
        torch_pin_memory: bool = False,
        num_simulations: int = 800,
        num_threads: int = 2,
        batch_size: int = 16,
        exploration_weight: float = 1.0,
        dirichlet_epsilon: float = 0.25,
        dirichlet_alpha: float = 0.5,
    ) -> None: ...
    def reset_position(self) -> None: ...
    def position(self) -> Position: ...
    def search(
        self, neural_net: Callable[[torch.Tensor], NeuralNetOutput], /
    ) -> MCTSResult: ...
    def apply_action(self, action: int, /) -> None: ...
    def history_size(self) -> int: ...
    def set_history_size(self, value: int, /) -> None: ...
    def torch_device(self) -> str: ...
    def set_torch_device(self, value: str, /) -> None: ...
    def torch_pin_memory(self) -> bool: ...
    def set_torch_pin_memory(self, value: bool, /) -> None: ...
    def num_simulations(self) -> int: ...
    def set_num_simulations(self, value: int, /) -> None: ...
    def num_threads(self) -> int: ...
    def set_num_threads(self, value: int, /) -> None: ...
    def batch_size(self) -> int: ...
    def set_batch_size(self, value: int, /) -> None: ...
    def exploration_weight(self) -> float: ...
    def set_exploration_weight(self, value: float, /) -> None: ...
    def dirichlet_epsilon(self) -> float: ...
    def set_dirichlet_epsilon(self, value: float, /) -> None: ...
    def dirichlet_alpha(self) -> float: ...
    def set_dirichlet_alpha(self, value: float, /) -> None: ...
