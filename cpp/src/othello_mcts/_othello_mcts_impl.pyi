from collections.abc import Callable
from typing import TypedDict

import torch

class Position:
    @staticmethod
    def initial_position() -> "Position": ...
    def legal_actions(self) -> list[int]: ...
    def apply_action(self, action: int) -> "Position": ...
    def is_terminal(self) -> bool: ...
    def action_value(self) -> float: ...
    def to_features(self) -> list[float]: ...
    def player(self) -> int: ...
    def __call__(self, row: int, col: int) -> int: ...
    def is_legal_move(self, row: int, col: int) -> bool: ...
    def __str__(self) -> str: ...

class _MCTSSearchResult(TypedDict):
    actions: list[int]
    visit_counts: list[int]
    mean_action_values: list[float]

class MCTS:
    def __init__(
        self,
        torch_device: str = "cpu",
        num_simulations: int = 800,
        batch_size: int = 16,
        num_threads: int = 16,
        exploration_weight: float = 1.0,
        dirichlet_epsilon: float = 0.25,
        dirichlet_alpha: float = 0.3,
    ) -> None: ...
    def reset_position(self, position: Position) -> None: ...
    def root_position(self) -> Position: ...
    def search(
        self, neural_net: Callable[[torch.Tensor], tuple[torch.Tensor, torch.Tensor]]
    ) -> _MCTSSearchResult: ...
    def apply_action(self, action: int) -> None: ...
    @property
    def torch_device(self) -> str: ...
    @torch_device.setter
    def torch_device(self, value: str) -> None: ...
    @property
    def num_simulations(self) -> int: ...
    @num_simulations.setter
    def num_simulations(self, value: int) -> None: ...
    @property
    def batch_size(self) -> int: ...
    @batch_size.setter
    def batch_size(self, value: int) -> None: ...
    @property
    def num_threads(self) -> int: ...
    @num_threads.setter
    def num_threads(self, value: int) -> None: ...
    @property
    def exploration_weight(self) -> float: ...
    @exploration_weight.setter
    def exploration_weight(self, value: float) -> None: ...
    @property
    def dirichlet_epsilon(self) -> float: ...
    @dirichlet_epsilon.setter
    def dirichlet_epsilon(self, value: float) -> None: ...
    @property
    def dirichlet_alpha(self) -> float: ...
    @dirichlet_alpha.setter
    def dirichlet_alpha(self, value: float) -> None: ...
